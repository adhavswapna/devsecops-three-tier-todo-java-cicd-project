pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/adhavswapna/three-tier-todo-java-cicd-project'
        GIT_CREDENTIALS_ID = 'GITHUB'
        GIT_BRANCH = 'main'
        SONAR_SCANNER = tool 'sonar-scanner'
        SCANNER_HOME = "${tool 'sonar-scanner'}"
        SONAR_HOST_URL = "http://3.82.214.228:9000"
        SONARQUBE_TOKEN = credentials('sonar-token') // SonarQube credential ID
        DOCKER_REPO_NAME = "swapnaswapna/backend-java-todo-app"
        
    }
    
    tools {
        jdk 'Openjdk-17'
        maven 'maven'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                script {
                    echo 'Checking out the GitHub repository...'
                    git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/adhavswapna/three-tier-todo-java-cicd-project'
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo 'Building and testing...'
                    dir('todo-java-app/backend') {
                        sh 'mvn clean package'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    echo 'Running SonarQube analysis...'
                    dir('todo-java-app/backend') {
                        withSonarQubeEnv('sonar-server') {
                            sh """
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=todo-three-tier-backend \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                               """
                        }
                    }
                }
            }
        }

        stage('OWASP Dependency Check Scan') {
            steps {
                script {
                    echo 'Running OWASP Dependency Check...'
                    dir('todo-java-app/backend') {
                        dependencyCheck additionalArguments: '', odcInstallation: 'dp-check' 
                    }
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                script {
                    echo 'Running Trivy scan...'
                    dir('todo-java-app/backend') {
                        sh "trivy image ${DOCKER_REPO_NAME}"
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    echo 'Building Docker image...'
                    dir('todo-java-app/backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh "docker build -t ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                script {
                    echo 'Updating deployment file...'
                    dir('kubernetes-manifest-files/backend-k8-manifest') {
                        withCredentials([string(credentialsId: 'GITHUB', variable: 'GITHUB_TOKEN')]) {
                            sh """
                                git config user.email "swapnaadhav123@gmail.com"
                                git config user.name "adhavswapna"
                                sed -i 's|image: .*|image: ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER}|' deployment.yml
                                git add deployment.yml
                                git commit -m "Update deployment image to version ${env.BUILD_NUMBER}"
                                git push https://adhavswapna:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git ${GIT_BRANCH}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'
                    dir('kubernetes-manifest-files/backend-k8-manifest') {
                        sh 'kubectl apply -f deployment.yml'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed'
        }
    }
}
