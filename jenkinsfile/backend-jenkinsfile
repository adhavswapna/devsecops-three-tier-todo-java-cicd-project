pipeline {
    agent any

    environment {
        GIT_BRANCH = 'main'
        GIT_USER_NAME = 'adhavswapna'
        GIT_REPO_NAME = 'three-tier-todo-java-cicd-project'
        DOCKER_REPO_NAME = 'todo-java-app'
        SONARQUBE_SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_CREDENTIAL = credentials('docker-cred')
    }

    tools {
        jdk 'Openjdk-17'
        maven 'maven'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                echo 'Checking out the GitHub repository...'
                git branch: "${GIT_BRANCH}", credentialsId: 'GITHUB', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
            }
        }

        stage('Build and Test') {
            steps {
                echo 'Building and testing...'
                dir('todo-java-app/backend') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('sonar-server') {
                dir('todo-java-app/backend')
                    sh "mvn sonar:sonar -Dsonar.host.url=http://3.82.214.228:9000 -Dsonar.login=squ_7cff7ec29c8958fd6856163b8a60946b3dae66b4"
                }
            }
        }

        stage('OWASP Dependency Check Scan') {
            steps {
                echo 'Running OWASP Dependency Check...'
                dir('todo-java-app/backend') {
                    dependencyCheck additionalArguments: '', odcInstallation: 'dp-check'
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                echo 'Running Trivy image scan...'
                dir('todo-java-app/backend') {
                    sh "trivy image ${DOCKER_REPO_NAME}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('todo-java-app/backend') {
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh "docker build -t ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER} ."
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                echo 'Updating Kubernetes deployment file...'
                dir('kubernetes-manifest-files/backend-k8-manifest') {
                    withCredentials([string(credentialsId: 'GITHUB', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.email "swapnaadhav123@gmail.com"
                            git config user.name "adhavswapna"
                            sed -i 's|image: .*|image: ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER}|' deployment.yml
                            git add deployment.yml
                            git commit -m "Update deployment image to version ${env.BUILD_NUMBER}"
                            git push https://adhavswapna:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git ${GIT_BRANCH}
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                dir('kubernetes-manifest-files/backend-k8-manifest') {
                    sh 'kubectl apply -f deployment.yml'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed'
        }
    }
}
