pipeline {
    agent any

    environment {
        GIT_BRANCH = 'main'
        GIT_USER_NAME = 'adhavswapna'
        GIT_REPO_NAME = 'three-tier-todo-java-cicd-project'
        DOCKER_REPO_NAME = 'swapnaswapna/frontend-java-todo-app'
        SONARQUBE_SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_CREDENTIAL = credentials('docker-cred')
        SONARQUBE_TOKEN = credentials('sonar-token')
        ODC_HOME = tool 'owasp-dp-check'
        GITHUB_TOKEN = credentials('github-token')
    }

    tools {
        jdk 'Openjdk-17'
        maven 'maven'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                echo 'Checking out the GitHub repository...'
                git branch: "${env.GIT_BRANCH}", credentialsId: 'gitlab-psw', url: "https://github.com/${env.GIT_USER_NAME}/${env.GIT_REPO_NAME}"
            }
        }

        stage('Build and Test') {
            steps {
                echo 'Building and testing...'
                dir('todo-java-app/frontend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Static Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        echo 'Running SonarQube analysis...'
                        withSonarQubeEnv('sonar-server') {
                            dir('todo-java-app/frontend') {
                                sh """
                                ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=todo-three-tier-frontend \
                                -Dsonar.host.url=http://3.82.112.55:9000 \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                                """
                            }
                        }
                    }
                }

                stage('OWASP Dependency-Check Scan') {
                    steps {
                        echo 'Running OWASP Dependency-Check scan...'
                        dir('todo-java-app/frontend') {
                            sh "${env.ODC_HOME}/bin/dependency-check.sh --scan . --disableAssembly"
                            archiveArtifacts artifacts: '**/dependency-check-report.xml', allowEmptyArchive: true
                        }
                    }
                }

                stage('Trivy File Scan') {
                    steps {
                        echo 'Running Trivy file system scan...'
                        dir('todo-java-app/frontend') {
                            sh 'trivy fs . > trivyfs.txt'
                            archiveArtifacts artifacts: 'trivyfs.txt', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('todo-java-app/frontend') {
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh "docker build --cache-from ${DOCKER_REPO_NAME}:latest -t ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER} ."
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                echo 'Updating Kubernetes deployment file...'
                dir('kubernetes-manifest-files/frontend-k8-manifest') {
                    withCredentials([string(credentialsId: 'github-token')]) {
                        sh """
                            git config user.email "swapnaadhav123@gmail.com"
                            git config user.name "${env.GIT_USER_NAME}"
                            sed -i 's|image: .*|image: ${DOCKER_REPO_NAME}:${env.BUILD_NUMBER}|' deployment.yml
                            git add deployment.yml
                            git commit -m "Update deployment image to version ${env.BUILD_NUMBER}"
                            git push https://adhavswapna:${GITHUB_TOKEN}@github.com/${env.GIT_USER_NAME}/${env.GIT_REPO_NAME}.git ${env.GIT_BRANCH}
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                dir('kubernetes-manifest-files/frontend-k8-manifest') {
                    sh 'kubectl apply -f deployment.yml'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed'
        }
        failure {
            echo 'Pipeline execution failed'
        }
        success {
            echo 'Pipeline executed successfully'
        }
    }
}
